测试 
当proxy_pass为：http://192.168.0.37  的时候，返回的数据如下：
1）浏览器请求访问http://192.168.0.224/lile/ 
2）到达192.168.0.224后，location /lile 匹配到之后，转发的地址为：http://192.168.0.37/lile/
3）然后到达192.168.0.37，匹配到了location /lile，所以就去/data目录下取数据   
当proxy_pass为： http://192.168.0.37/  的时候，返回的数据如下：
1）浏览器请求访问http://192.168.0.224/lile/
2）达192.168.0.224后，location /lile 匹配到之后，转发的地址为：http://192.168.0.37/，这里在proxy_pass的 http://192.168.0.37/ 的“/”会把/lile给替换掉
3）然后到达192.168.0.37，直接匹配到的是root /web1，所以就去/web1目录下取数据 
  
在上面的location若为/，没有其他的具体匹配值，那么这两个的访问无区别      
location / {
    配置一： proxy_pass  http://192.168.0.37/;
    配置二： proxy_pass  http://192.168.0.37;
}   
 配置一转发的时候，新的URI替换原有的得到的还是 http://192.168.0.37/
 配置二转发的时候，不会发生改变 http://192.168.0.37/  

总结 
 proxy_pass URL（http://192.168.0.224/uri/）
 当URL中含有URI时，Nginx服务器会使用新的URI替换原有的URI（这里的新的URI理解为proxy_pass URL里的URI）
 当URL中不含URI时，Nginx服务器不会改变原有地址的URI这里的URI与URL暂且不去讨论它是怎么定义的，就理解为域名或者IP地址之后的路径（暂时还没弄清楚他们两个的区别） 
