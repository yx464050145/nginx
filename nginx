1、我们内网的数据通过nginx转发到第三方合作公司对应的域名，此处简称为 域名A
2、第三方公司的域名A做了CDN，对应多个IP（IP1,IP2,IP3...），且随时都有可能因某种原因，丢弃其中一个IP
3、某一天该第三方公司将他们的域名A对应的地址IP3废弃不用了，域名不再往IP3上解析了
4、但是我们的nginx因为曾经请求域名A时缓存了IP3，导致后续的许多交易数据仍旧是给IP3发送，造成交易失败，这种情况在我们没有reload nginx之前，存在了2周左右，说明nginx缓存这个IP3缓存了很长时间，这就是造成了我们交易失败的原因(当时排查了好几天)，后来多方联系核对后，才知道第三方公司早在3周前就废弃了这个IP3，(可能为了全网的DNS都刷新，域名A不再向IP3解析后，但是IP3所对应的服务器还继续沿用了一段时间，所以我们是在废弃后的第二周才开始报错)



nginx的resolver 解决方案
1、默认nginx会通过操作系统设置的DNS服务器(/etc/resolv.conf)去解析域名
2、其实nginx还可以通过自身设置DNS服务器，而不用去找操作系统的DNS
3、下面来讲一个这个resolver
示例配置如下：
server {
       listen      8080;
       server_name localhost;
       resolver 114.114.114.114 223.5.5.5 valid=3600s;
       resolver_timeout 3s;
       set $qq "www.qq.com";
       location / {
          proxy_pass http://$qq;
       }
   }

参数说明：
# resolver 可以在http全局设定，也可在server里面设定
# resolver 后面指定DNS服务器，可以指定多个，空格隔开
# valid设置DNS缓存失效时间，自己根据情况判断，建议600以上
# resolver_timeout 指定解析域名时，DNS服务器的超时时间，建议3秒左右
#注意：当resolver 后面跟多个DNS服务器时，一定要保证这些DNS服务器都是有效的，因为这种是负载均衡模式的，当DNS记录失效了(超过valid时间)，首先由第一个DNS服务器(114.114.114.114)去解析，下一次继续失效时由第二个DNS服务器(223.5.5.5)去解析，亲自测试的，如有任何一个DNS服务器是坏的，那么这一次的解析会一直持续到resolver_timeout ，然后解析失败，且日志报错解析不了域名，通过页面抛出502错误。
#重点：如上例，在代理到后端域名http://www.qq.com时，千万不要直接写在proxy_pass中，因为server中使用了resolver，所以必须先把域名定义到一个变量里面，然后在 proxy_pass http://$变量名，否则nginx语法检测一直会报错，提示解析不了域名

3：测试 
当proxy_pass为：http://192.168.0.37  的时候，返回的数据如下：
1）浏览器请求访问http://192.168.0.224/lile/ 
2）到达192.168.0.224后，location /lile 匹配到之后，转发的地址为：http://192.168.0.37/lile/
3）然后到达192.168.0.37，匹配到了location /lile，所以就去/data目录下取数据   
当proxy_pass为： http://192.168.0.37/  的时候，返回的数据如下：
1）浏览器请求访问http://192.168.0.224/lile/
2）达192.168.0.224后，location /lile 匹配到之后，转发的地址为：http://192.168.0.37/，这里在proxy_pass的 http://192.168.0.37/ 的“/”会把/lile给替换掉
3）然后到达192.168.0.37，直接匹配到的是root /web1，所以就去/web1目录下取数据 
  
4：其他 在上面的location若为/，没有其他的具体匹配值，那么这两个的访问无区别      
location / {
    配置一： proxy_pass  http://192.168.0.37/;
    配置二： proxy_pass  http://192.168.0.37;
}   
 配置一转发的时候，新的URI替换原有的得到的还是 http://192.168.0.37/
 配置二转发的时候，不会发生改变 http://192.168.0.37/  
 5：总结 
 proxy_pass URL（http://192.168.0.224/uri/）
 当URL中含有URI时，Nginx服务器会使用新的URI替换原有的URI（这里的新的URI理解为proxy_pass URL里的URI）
 当URL中不含URI时，Nginx服务器不会改变原有地址的URI这里的URI与URL暂且不去讨论它是怎么定义的，就理解为域名或者IP地址之后的路径（暂时还没弄清楚他们两个的区别） 
